// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/message/lifi.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/message/lifi.go -destination=./chains/evm/message/mock/lifi.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	contracts "github.com/sprintertech/sprinter-signing/chains/evm/calls/contracts"
	lifi "github.com/sprintertech/sprinter-signing/protocol/lifi"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderFetcher is a mock of OrderFetcher interface.
type MockOrderFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockOrderFetcherMockRecorder
	isgomock struct{}
}

// MockOrderFetcherMockRecorder is the mock recorder for MockOrderFetcher.
type MockOrderFetcherMockRecorder struct {
	mock *MockOrderFetcher
}

// NewMockOrderFetcher creates a new mock instance.
func NewMockOrderFetcher(ctrl *gomock.Controller) *MockOrderFetcher {
	mock := &MockOrderFetcher{ctrl: ctrl}
	mock.recorder = &MockOrderFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderFetcher) EXPECT() *MockOrderFetcherMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockOrderFetcher) GetOrder(orderID string) (*lifi.LifiOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderID)
	ret0, _ := ret[0].(*lifi.LifiOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderFetcherMockRecorder) GetOrder(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderFetcher)(nil).GetOrder), orderID)
}

// MockCompact is a mock of Compact interface.
type MockCompact struct {
	ctrl     *gomock.Controller
	recorder *MockCompactMockRecorder
	isgomock struct{}
}

// MockCompactMockRecorder is the mock recorder for MockCompact.
type MockCompactMockRecorder struct {
	mock *MockCompact
}

// NewMockCompact creates a new mock instance.
func NewMockCompact(ctrl *gomock.Controller) *MockCompact {
	mock := &MockCompact{ctrl: ctrl}
	mock.recorder = &MockCompactMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompact) EXPECT() *MockCompactMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockCompact) Address() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockCompactMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockCompact)(nil).Address))
}

// Allocator mocks base method.
func (m *MockCompact) Allocator(allocatorID *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocator", allocatorID)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocator indicates an expected call of Allocator.
func (mr *MockCompactMockRecorder) Allocator(allocatorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocator", reflect.TypeOf((*MockCompact)(nil).Allocator), allocatorID)
}

// GetForcedWithdrawalStatus mocks base method.
func (m *MockCompact) GetForcedWithdrawalStatus(account common.Address, id *big.Int) (contracts.WithdrawalStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForcedWithdrawalStatus", account, id)
	ret0, _ := ret[0].(contracts.WithdrawalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForcedWithdrawalStatus indicates an expected call of GetForcedWithdrawalStatus.
func (mr *MockCompactMockRecorder) GetForcedWithdrawalStatus(account, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForcedWithdrawalStatus", reflect.TypeOf((*MockCompact)(nil).GetForcedWithdrawalStatus), account, id)
}

// HasConsumedAllocatorNonce mocks base method.
func (m *MockCompact) HasConsumedAllocatorNonce(allocator common.Address, nonce *big.Int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConsumedAllocatorNonce", allocator, nonce)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasConsumedAllocatorNonce indicates an expected call of HasConsumedAllocatorNonce.
func (mr *MockCompactMockRecorder) HasConsumedAllocatorNonce(allocator, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConsumedAllocatorNonce", reflect.TypeOf((*MockCompact)(nil).HasConsumedAllocatorNonce), allocator, nonce)
}
