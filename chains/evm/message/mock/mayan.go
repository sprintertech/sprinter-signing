// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/message/mayan.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/message/mayan.go -destination=./chains/evm/message/mock/mayan.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	contracts "github.com/sprintertech/sprinter-signing/chains/evm/calls/contracts"
	mayan "github.com/sprintertech/sprinter-signing/protocol/mayan"
	gomock "go.uber.org/mock/gomock"
)

// MockMayanContract is a mock of MayanContract interface.
type MockMayanContract struct {
	ctrl     *gomock.Controller
	recorder *MockMayanContractMockRecorder
	isgomock struct{}
}

// MockMayanContractMockRecorder is the mock recorder for MockMayanContract.
type MockMayanContractMockRecorder struct {
	mock *MockMayanContract
}

// NewMockMayanContract creates a new mock instance.
func NewMockMayanContract(ctrl *gomock.Controller) *MockMayanContract {
	mock := &MockMayanContract{ctrl: ctrl}
	mock.recorder = &MockMayanContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMayanContract) EXPECT() *MockMayanContractMockRecorder {
	return m.recorder
}

// DecodeFulfillCall mocks base method.
func (m *MockMayanContract) DecodeFulfillCall(calldata []byte) (*contracts.MayanFulfillParams, *contracts.MayanFulfillMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeFulfillCall", calldata)
	ret0, _ := ret[0].(*contracts.MayanFulfillParams)
	ret1, _ := ret[1].(*contracts.MayanFulfillMsg)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeFulfillCall indicates an expected call of DecodeFulfillCall.
func (mr *MockMayanContractMockRecorder) DecodeFulfillCall(calldata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeFulfillCall", reflect.TypeOf((*MockMayanContract)(nil).DecodeFulfillCall), calldata)
}

// GetOrder mocks base method.
func (m *MockMayanContract) GetOrder(msg *contracts.MayanFulfillMsg, swap *mayan.MayanSwap, srcTokenDecimals uint8) (*contracts.MayanOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", msg, swap, srcTokenDecimals)
	ret0, _ := ret[0].(*contracts.MayanOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockMayanContractMockRecorder) GetOrder(msg, swap, srcTokenDecimals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockMayanContract)(nil).GetOrder), msg, swap, srcTokenDecimals)
}

// MockSwapFetcher is a mock of SwapFetcher interface.
type MockSwapFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSwapFetcherMockRecorder
	isgomock struct{}
}

// MockSwapFetcherMockRecorder is the mock recorder for MockSwapFetcher.
type MockSwapFetcherMockRecorder struct {
	mock *MockSwapFetcher
}

// NewMockSwapFetcher creates a new mock instance.
func NewMockSwapFetcher(ctrl *gomock.Controller) *MockSwapFetcher {
	mock := &MockSwapFetcher{ctrl: ctrl}
	mock.recorder = &MockSwapFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapFetcher) EXPECT() *MockSwapFetcherMockRecorder {
	return m.recorder
}

// GetSwap mocks base method.
func (m *MockSwapFetcher) GetSwap(hash string) (*mayan.MayanSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwap", hash)
	ret0, _ := ret[0].(*mayan.MayanSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwap indicates an expected call of GetSwap.
func (mr *MockSwapFetcherMockRecorder) GetSwap(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwap", reflect.TypeOf((*MockSwapFetcher)(nil).GetSwap), hash)
}
