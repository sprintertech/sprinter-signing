// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/message/lifiEscrow.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/message/lifiEscrow.go -destination=./chains/evm/message/mock/lifiEscrow.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	lifi "github.com/sprintertech/lifi-solver/pkg/protocols/lifi"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderFetcher is a mock of OrderFetcher interface.
type MockOrderFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockOrderFetcherMockRecorder
	isgomock struct{}
}

// MockOrderFetcherMockRecorder is the mock recorder for MockOrderFetcher.
type MockOrderFetcherMockRecorder struct {
	mock *MockOrderFetcher
}

// NewMockOrderFetcher creates a new mock instance.
func NewMockOrderFetcher(ctrl *gomock.Controller) *MockOrderFetcher {
	mock := &MockOrderFetcher{ctrl: ctrl}
	mock.recorder = &MockOrderFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderFetcher) EXPECT() *MockOrderFetcherMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockOrderFetcher) GetOrder(orderID string) (*lifi.LifiOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderID)
	ret0, _ := ret[0].(*lifi.LifiOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderFetcherMockRecorder) GetOrder(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderFetcher)(nil).GetOrder), orderID)
}
