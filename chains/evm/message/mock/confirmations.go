// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/message/confirmations.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/message/confirmations.go -destination=./chains/evm/message/mock/confirmations.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenPricer is a mock of TokenPricer interface.
type MockTokenPricer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenPricerMockRecorder
	isgomock struct{}
}

// MockTokenPricerMockRecorder is the mock recorder for MockTokenPricer.
type MockTokenPricerMockRecorder struct {
	mock *MockTokenPricer
}

// NewMockTokenPricer creates a new mock instance.
func NewMockTokenPricer(ctrl *gomock.Controller) *MockTokenPricer {
	mock := &MockTokenPricer{ctrl: ctrl}
	mock.recorder = &MockTokenPricerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenPricer) EXPECT() *MockTokenPricerMockRecorder {
	return m.recorder
}

// TokenPrice mocks base method.
func (m *MockTokenPricer) TokenPrice(symbol string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenPrice", symbol)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenPrice indicates an expected call of TokenPrice.
func (mr *MockTokenPricerMockRecorder) TokenPrice(symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenPrice", reflect.TypeOf((*MockTokenPricer)(nil).TokenPrice), symbol)
}
