// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sprintertech/lifi-solver/pkg/pricing (interfaces: OrderPricer)
//
// Generated by this command:
//
//	mockgen -package mock_message -destination=./chains/evm/message/mock/pricing.go github.com/sprintertech/lifi-solver/pkg/pricing OrderPricer
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	order "github.com/sprintertech/lifi-solver/pkg/order"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderPricer is a mock of OrderPricer interface.
type MockOrderPricer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPricerMockRecorder
	isgomock struct{}
}

// MockOrderPricerMockRecorder is the mock recorder for MockOrderPricer.
type MockOrderPricerMockRecorder struct {
	mock *MockOrderPricer
}

// NewMockOrderPricer creates a new mock instance.
func NewMockOrderPricer(ctrl *gomock.Controller) *MockOrderPricer {
	mock := &MockOrderPricer{ctrl: ctrl}
	mock.recorder = &MockOrderPricerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPricer) EXPECT() *MockOrderPricerMockRecorder {
	return m.recorder
}

// PriceInputs mocks base method.
func (m *MockOrderPricer) PriceInputs(inputs []order.Input) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PriceInputs", inputs)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PriceInputs indicates an expected call of PriceInputs.
func (mr *MockOrderPricerMockRecorder) PriceInputs(inputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PriceInputs", reflect.TypeOf((*MockOrderPricer)(nil).PriceInputs), inputs)
}
