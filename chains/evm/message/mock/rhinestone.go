// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/message/rhinestone.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/message/rhinestone.go -destination=./chains/evm/message/mock/rhinestone.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	rhinestone "github.com/sprintertech/sprinter-signing/protocol/rhinestone"
	gomock "go.uber.org/mock/gomock"
)

// MockBundleFetcher is a mock of BundleFetcher interface.
type MockBundleFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBundleFetcherMockRecorder
	isgomock struct{}
}

// MockBundleFetcherMockRecorder is the mock recorder for MockBundleFetcher.
type MockBundleFetcherMockRecorder struct {
	mock *MockBundleFetcher
}

// NewMockBundleFetcher creates a new mock instance.
func NewMockBundleFetcher(ctrl *gomock.Controller) *MockBundleFetcher {
	mock := &MockBundleFetcher{ctrl: ctrl}
	mock.recorder = &MockBundleFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleFetcher) EXPECT() *MockBundleFetcherMockRecorder {
	return m.recorder
}

// GetBundle mocks base method.
func (m *MockBundleFetcher) GetBundle(bundleID string) (*rhinestone.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundle", bundleID)
	ret0, _ := ret[0].(*rhinestone.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundle indicates an expected call of GetBundle.
func (mr *MockBundleFetcherMockRecorder) GetBundle(bundleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockBundleFetcher)(nil).GetBundle), bundleID)
}
