// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/handlers/signing.go
//
// Generated by this command:
//
//	mockgen -source=./api/handlers/signing.go -destination=./api/handlers/mock/signing.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSignatureCacher is a mock of SignatureCacher interface.
type MockSignatureCacher struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureCacherMockRecorder
	isgomock struct{}
}

// MockSignatureCacherMockRecorder is the mock recorder for MockSignatureCacher.
type MockSignatureCacherMockRecorder struct {
	mock *MockSignatureCacher
}

// NewMockSignatureCacher creates a new mock instance.
func NewMockSignatureCacher(ctrl *gomock.Controller) *MockSignatureCacher {
	mock := &MockSignatureCacher{ctrl: ctrl}
	mock.recorder = &MockSignatureCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureCacher) EXPECT() *MockSignatureCacherMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSignatureCacher) Subscribe(ctx context.Context, id string, sigChannel chan []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", ctx, id, sigChannel)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSignatureCacherMockRecorder) Subscribe(ctx, id, sigChannel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSignatureCacher)(nil).Subscribe), ctx, id, sigChannel)
}
