// Code generated by MockGen. DO NOT EDIT.
// Source: ./tss/ecdsa/signing/signing.go
//
// Generated by this command:
//
//	mockgen -destination=./tss/ecdsa/common/mock/fetcher.go -source=./tss/ecdsa/signing/signing.go -package mock_tss
//

// Package mock_tss is a generated GoMock package.
package mock_tss

import (
	reflect "reflect"

	keyshare "github.com/sprintertech/sprinter-signing/keyshare"
	gomock "go.uber.org/mock/gomock"
)

// MockSaveDataFetcher is a mock of SaveDataFetcher interface.
type MockSaveDataFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSaveDataFetcherMockRecorder
	isgomock struct{}
}

// MockSaveDataFetcherMockRecorder is the mock recorder for MockSaveDataFetcher.
type MockSaveDataFetcherMockRecorder struct {
	mock *MockSaveDataFetcher
}

// NewMockSaveDataFetcher creates a new mock instance.
func NewMockSaveDataFetcher(ctrl *gomock.Controller) *MockSaveDataFetcher {
	mock := &MockSaveDataFetcher{ctrl: ctrl}
	mock.recorder = &MockSaveDataFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveDataFetcher) EXPECT() *MockSaveDataFetcherMockRecorder {
	return m.recorder
}

// GetKeyshare mocks base method.
func (m *MockSaveDataFetcher) GetKeyshare() (keyshare.ECDSAKeyshare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyshare")
	ret0, _ := ret[0].(keyshare.ECDSAKeyshare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyshare indicates an expected call of GetKeyshare.
func (mr *MockSaveDataFetcherMockRecorder) GetKeyshare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyshare", reflect.TypeOf((*MockSaveDataFetcher)(nil).GetKeyshare))
}

// LockKeyshare mocks base method.
func (m *MockSaveDataFetcher) LockKeyshare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LockKeyshare")
}

// LockKeyshare indicates an expected call of LockKeyshare.
func (mr *MockSaveDataFetcherMockRecorder) LockKeyshare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyshare", reflect.TypeOf((*MockSaveDataFetcher)(nil).LockKeyshare))
}

// UnlockKeyshare mocks base method.
func (m *MockSaveDataFetcher) UnlockKeyshare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnlockKeyshare")
}

// UnlockKeyshare indicates an expected call of UnlockKeyshare.
func (mr *MockSaveDataFetcherMockRecorder) UnlockKeyshare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyshare", reflect.TypeOf((*MockSaveDataFetcher)(nil).UnlockKeyshare))
}
